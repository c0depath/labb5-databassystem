-- Uppgift 1
CREATE TABLE BANKKUND(
    PNR VARCHAR2(11) NOT NULL,
    FNAMN VARCHAR2(25) NOT NULL,
    ENAMN VARCHAR2(25) NOT NULL,
    PASSWD VARCHAR2(16) NOT NULL,
    CONSTRAINT BANKKUND_PNR_PK PRIMARY KEY (PNR)
);

CREATE TABLE KONTOTYP(
    KTNR NUMBER(6) NOT NULL,
    KTNAMN VARCHAR2(20) NOT NULL,
    RÄNTA NUMBER(5,2) NOT NULL,
    CONSTRAINT KONTOTYP_KTNR_PK PRIMARY KEY (KTNR)
);

CREATE TABLE RÄNTEÄNDRING(
    RNR NUMBER(6) NOT NULL,
    KTNR NUMBER(6) NOT NULL,
    RÄNTA NUMBER(5,2) NOT NULL,
    RNR_DATUM DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT RÄNTEÄNDRING_RNR_PK PRIMARY KEY (RNR),
    CONSTRAINT RÄNTEÄNDRING_KTNR_FK FOREIGN KEY (KTNR) references KONTOTYP (KTNR)
);

CREATE TABLE KONTO(
    KNR NUMBER(8) NOT NULL,
    KTNR NUMBER(6) NOT NULL,
    REGDATUM DATE DEFAULT SYSDATE NOT NULL,
    SALDO NUMBER(10,2) ,
    CONSTRAINT KONTO_KNR_PK PRIMARY KEY (KNR),
    CONSTRAINT KONTO_KTNR_FK FOREIGN KEY (KTNR) REFERENCES KONTOTYP (KTNR)
);

CREATE TABLE KONTOÄGARE(
    RADNR NUMBER(9) NOT NULL,
    PNR VARCHAR2(11) NOT NULL,
    KNR NUMBER(8) NOT NULL,
    CONSTRAINT KONTOÄGARE_RADNR_PK PRIMARY KEY(RADNR),
    CONSTRAINT KONTOÄGARE_PNR_FK FOREIGN KEY (PNR) REFERENCES BANKKUND (PNR),
    CONSTRAINT KONTOÄGARE_KNR_FK FOREIGN KEY (KNR) REFERENCES KONTO (KNR)
);

CREATE TABLE UTTAG(
    RADNR NUMBER(9) NOT NULL,
    PNR VARCHAR2(11) NOT NULL,
    KNR NUMBER(8) NOT NULL,
    BELOPP NUMBER(10, 2),
    DATUM DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT UTTAG_RADNR_PK PRIMARY KEY (RADNR),
    CONSTRAINT UTTAG_PNR_FK FOREIGN KEY (PNR) REFERENCES BANKKUND (PNR)
);

CREATE TABLE INSÄTTNING(
    RADNR NUMBER(9) NOT NULL,
    PNR VARCHAR2(11) NOT NULL,
    KNR NUMBER(8) NOT NULL,
    BELOPP NUMBER(10, 2),
    DATUM DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT INSÄTTNING_RADNR_PK PRIMARY KEY (RADNR),
    CONSTRAINT INSÄTTNING_PNR_FK FOREIGN KEY (PNR) REFERENCES BANKKUND (PNR),
    CONSTRAINT INSÄTTNING_KNR_FK FOREIGN KEY (KNR) REFERENCES KONTO (KNR)
);

CREATE TABLE ÖVERFÖRING(
    RADNR NUMBER(9) NOT NULL,
    PNR VARCHAR2(11) NOT NULL,
    FRÅN_KNR NUMBER(8) NOT NULL,
    TILL_KNR NUMBER(8) NOT NULL,
    BELOPP NUMBER(10, 2),
    DATUM DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT ÖVERFÖRING_RADNR_PK PRIMARY KEY (RADNR),
    CONSTRAINT ÖVERFÖRING_PNR_FK FOREIGN KEY (PNR) REFERENCES BANKKUND(PNR)
);

-- Uppgift 3
CREATE OR REPLACE TRIGGER BIUFER_BANKKUND
BEFORE INSERT OR UPDATE OF PASSWD
ON BANKKUND 
FOR EACH ROW 
BEGIN
IF LENGTH(:NEW.PASSWD) != 6 
THEN 
RAISE_APPLICATION_ERROR(-20001, 'Lösenordet måste vara exakt sex tecken långt.');
END IF;
END;

-- Uppgift 4
CREATE OR REPLACE PROCEDURE DO_BANKKUND(
    P_PNR IN BANKKUND.PNR%TYPE,
    P_FNAMN IN BANKKUND.FNAMN%TYPE, 
    P_ENAMN IN BANKKUND.ENAMN%TYPE,
    P_PASSWD IN BANKKUND.PASSWD%TYPE)
AS
BEGIN
INSERT INTO BANKKUND(PNR, FNAMN, ENAMN, PASSWD)
VALUES(P_PNR, P_FNAMN, P_ENAMN, P_PASSWD);
COMMIT;
END;

-- Uppgift 5
-- Triggertest

/* TRIGGERTEST = BEGIN DO_BANKKUND('691124-4478','Bo','Ek','qwe'); END; */

-------------------------Start copy and paste---------------------------------
BEGIN
DO_BANKKUND('630214-1213','Isak','Hansson','bertil');
DO_BANKKUND('930112-1105','Bertil','Rosengårdh','olle13');
DO_BANKKUND('990309-8957','Lena','Karlsson','asdfgh');
DO_BANKKUND('660710-5156','Karl','Kvist','qwerty');
COMMIT;
END;
-------------------------End copy and paste---------------------------------
SELECT * FROM BANKKUND

-- Uppgift 6
CREATE SEQUENCE RADNR_SEQ
START WITH 1
INCREMENT BY 1;
-------------------------Start copy and paste---------------------------------
INSERT INTO kontotyp(ktnr,ktnamn,ränta)
VALUES(1,'bondkonto',3.4);
INSERT INTO kontotyp(ktnr,ktnamn,ränta)
VALUES(2,'potatiskonto',4.4);
INSERT INTO kontotyp(ktnr,ktnamn,ränta)
VALUES(3,'griskonto',2.4);
COMMIT;
INSERT INTO konto(knr,ktnr,regdatum,saldo)
VALUES(123,1,SYSDATE - 321,0);
INSERT INTO konto(knr,ktnr,regdatum,saldo)
VALUES(5899,2,SYSDATE - 2546,0);
INSERT INTO konto(knr,ktnr,regdatum,saldo)
VALUES(5587,3,SYSDATE - 10,0);
INSERT INTO konto(knr,ktnr,regdatum,saldo)
VALUES(8896,1,SYSDATE - 45,0);
COMMIT;
INSERT INTO kontoägare(radnr,pnr,knr)
VALUES(radnr_seq.NEXTVAL,'930112-1105',123);
INSERT INTO kontoägare(radnr,pnr,knr)
VALUES(radnr_seq.NEXTVAL,'630214-1213',123);
INSERT INTO kontoägare(radnr,pnr,knr)
VALUES(radnr_seq.NEXTVAL,'990309-8957',5899);
INSERT INTO kontoägare(radnr,pnr,knr)
VALUES(radnr_seq.NEXTVAL,'660710-5156',8896);
COMMIT;
-------------------------End copy and paste---------------------------------


-- Uppgift 7
CREATE OR REPLACE FUNCTION LOGGA_IN(
    P_PNR in BANKKUND.PNR%TYPE,
    P_PASSWD in BANKKUND.PASSWD%TYPE) 
RETURN NUMBER
AS
V_PNR BANKKUND.PNR%TYPE;
V_PASSWD BANKKUND.PASSWD%TYPE;
BEGIN
SELECT PNR, PASSWD 
INTO V_PNR, V_PASSWD
FROM BANKKUND
WHERE PNR = P_PNR 
AND PASSWD = P_PASSWD;
RETURN 1;
EXCEPTION
WHEN OTHERS 
THEN 
RETURN 0;
END;

-- Uppgift 8
CREATE OR REPLACE FUNCTION GET_SALDO(
    P_KNR IN KONTO.KNR%TYPE) 
RETURN NUMBER 
AS 
V_SALDO KONTO.SALDO%TYPE;
BEGIN
SELECT SALDO 
INTO V_SALDO
FROM KONTO
WHERE KNR = P_KNR;
RETURN V_SALDO;
EXCEPTION
WHEN no_data_found 
THEN 
RETURN -1;
END;

-- Uppgift 9
CREATE OR REPLACE FUNCTION GET_BEHÖRIGHET(
    p_pnr IN KONTOÄGARE.PNR%TYPE,
    p_knr IN KONTOÄGARE.KNR%TYPE) 
RETURN NUMBER 
AS 
V_SUCCESS NUMBER;
BEGIN
SELECT COUNT(RADNR) 
INTO V_SUCCESS
FROM KONTOÄGARE
WHERE PNR = P_PNR 
AND KNR = P_KNR;
RETURN V_SUCCESS;
END;

-- Uppgift 10
CREATE OR REPLACE TRIGGER AIFER_INSÄTTING
AFTER INSERT 
ON INSÄTTNING 
FOR EACH ROW 
BEGIN
UPDATE KONTO
SET SALDO = SALDO + :NEW.BELOPP
WHERE KNR = :NEW.KNR;
END;

-- Uppgift 11
CREATE OR REPLACE TRIGGER BIFER_UTTAG 
BEFORE INSERT 
ON UTTAG 
FOR EACH ROW 
BEGIN 
IF(:NEW.BELOPP > GET_SALDO(:NEW.KNR)) 
THEN 
RAISE_APPLICATION_ERROR(-20001, 'Ditt saldo är för detta uttaget');
END IF;
END;

-- Uppgift 12
CREATE OR REPLACE TRIGGER AIFER_UTTAG
AFTER INSERT 
ON UTTAG 
FOR EACH ROW 
BEGIN
UPDATE KONTO
SET SALDO = SALDO - :NEW.BELOPP
WHERE KONTO.KNR = :NEW.KNR;
END;

-- Uppgift 13
CREATE OR REPLACE TRIGGER BIFER_ÖVERFÖRING 
BEFORE INSERT OR UPDATE 
OF BELOPP, FRÅN_KNR
ON ÖVERFÖRING 
FOR EACH ROW 
BEGIN 
IF(:NEW.BELOPP > GET_SALDO(:NEW.FRÅN_KNR)) 
THEN 
RAISE_APPLICATION_ERROR(-20005, 'Ditt saldo är för lågt för den här överföring');
END IF;
END;

-- Uppgift 14
CREATE OR REPLACE TRIGGER AIFER_ÖVERFÖRING
AFTER INSERT 
ON ÖVERFÖRING 
FOR EACH ROW 
BEGIN
UPDATE KONTO
SET SALDO = SALDO - :NEW.BELOPP
WHERE KONTO.KNR = :NEW.FRÅN_KNR;
UPDATE KONTO
SET SALDO = SALDO + :NEW.BELOPP
WHERE KONTO.KNR = :NEW.TILL_KNR;
END;

-- Uppgift 15
CREATE OR REPLACE PROCEDURE DO_INSÄTTNING(
    P_PNR IN INSÄTTNING.PNR%TYPE,
    P_KNR IN INSÄTTNING.KNR%TYPE,
    P_BELOPP IN INSÄTTNING.BELOPP%TYPE) 
AS 
V_RADNR NUMBER(6);
BEGIN
SELECT RADNR_SEQ.NEXTVAL 
INTO V_RADNR
FROM DUAL;
INSERT INTO INSÄTTNING(RADNR, PNR, KNR, BELOPP, DATUM)
VALUES(V_RADNR, P_PNR, P_KNR, P_BELOPP, SYSDATE);
COMMIT;
DBMS_OUTPUT.PUT_LINE('Ditt saldo är: ' || GET_SALDO(P_KNR));
END;

-- Uppgift 16 - Testa att proceduren do_insättning fungerar.
BEGIN
DO_INSÄTTNING('630214-1213', 123, 12000);
END;

SELECT *
FROM KONTO;

-- Uppgift 17
CREATE OR REPLACE PROCEDURE DO_UTTAG(
    P_PNR IN UTTAG.PNR%TYPE,
    P_KNR IN UTTAG.KNR%TYPE,
    P_BELOPP IN UTTAG.BELOPP%TYPE) 
AS
V_KNR NUMBER(6);
OBEHÖRIG EXCEPTION;
BEGIN 
IF(GET_BEHÖRIGHET(P_PNR, P_KNR) = 1) 
THEN
SELECT RADNR_SEQ.NEXTVAL 
INTO V_KNR
FROM DUAL;
INSERT INTO UTTAG(RADNR, PNR, KNR, BELOPP, DATUM)
VALUES(V_KNR, P_PNR, P_KNR, P_BELOPP, SYSDATE);
DBMS_OUTPUT.PUT_LINE('Du är behörig');
DBMS_OUTPUT.PUT_LINE('Ditt saldo är: ' || GET_SALDO(P_KNR));
ELSE 
RAISE OBEHÖRIG;
END IF;
EXCEPTION
WHEN OBEHÖRIG 
THEN 
RAISE_APPLICATION_ERROR(-20007, 'Du är obehörig');
END;

-- Uppgift 18
SELECT * FROM KONTO;

SELECT * FROM UTTAG;

BEGIN 
DO_UTTAG('630214-1213', 123, 1200);
END;

BEGIN 
DO_UTTAG('540126-1111', 123, 1000);
END;

BEGIN 
DO_UTTAG('990309-8957', 198, 100);
END;

BEGIN 
DO_UTTAG('930112-1105', 123, 50000000000000000000000);
END;

BEGIN 
DO_UTTAG('930112-1105', 123, -50000000000000000000000);
END;

BEGIN 
DO_UTTAG('930112-1105', 123, 2000);
END;

SELECT * FROM UTTAG;

SELECT * FROM KONTO;

-- Uppgift 19
CREATE OR REPLACE PROCEDURE DO_ÖVERFÖRING(
    P_PNR IN ÖVERFÖRING.PNR%TYPE,
    P_FRÅN_KNR IN ÖVERFÖRING.FRÅN_KNR%TYPE,
    P_TILL_KNR IN ÖVERFÖRING.TILL_KNR%TYPE,
    P_BELOPP IN ÖVERFÖRING.BELOPP%TYPE) 
AS 
V_KNR NUMBER(6);
OBEHÖRIG EXCEPTION;
BEGIN 
IF(GET_BEHÖRIGHET(P_PNR, P_FRÅN_KNR) = 1) 
THEN
SELECT RADNR_SEQ.NEXTVAL 
INTO V_KNR
FROM DUAL;
INSERT INTO ÖVERFÖRING(RADNR, PNR, FRÅN_KNR, TILL_KNR, BELOPP, DATUM)
VALUES(V_KNR, P_PNR, P_FRÅN_KNR, P_TILL_KNR, P_BELOPP, SYSDATE);
DBMS_OUTPUT.PUT_LINE('Du är behörig för överföring!');
DBMS_OUTPUT.PUT_LINE('Saldo på konto: ' || P_FRÅN_KNR || ' är ' || GET_SALDO(P_FRÅN_KNR));
DBMS_OUTPUT.PUT_LINE('Saldo på konto: ' || P_TILL_KNR || ' är ' || GET_SALDO(P_TILL_KNR));
ELSE 
RAISE OBEHÖRIG;
END IF;
EXCEPTION
WHEN OBEHÖRIG 
THEN 
RAISE_APPLICATION_ERROR(-20010, 'Du är inte behörig för denna överföring!');
END;

-- UPPGIFT 20
SELECT * FROM KONTO;

SELECT * FROM ÖVERFÖRING;

BEGIN 
DO_ÖVERFÖRING('540126-1111', 123, 5899, 1000);
END;

BEGIN 
DO_ÖVERFÖRING('630214-1213', 124, 5899, 1000);
END;

BEGIN 
DO_ÖVERFÖRING('630214-1213', 123, 5899, 100000000000000000);
END;

BEGIN 
DO_ÖVERFÖRING('630214-1213', 123, 5899, -100000000000000000);
END;

BEGIN 
DO_ÖVERFÖRING('630214-1213', 123, 5899, 1200);
END;

SELECT * FROM ÖVERFÖRING;

SELECT * FROM KONTO;